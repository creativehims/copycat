{"version":3,"sources":["styles.js","CopyCat.jsx","CopyCatContainer.jsx","reportWebVitals.js","index.js"],"names":["styles","divStyles","fontFamily","fontSize","color","backgroundColor","minHeight","minWidth","display","flexDirection","alignItems","justifyContent","imgStyles","marginTop","width","CopyCat","props","copying","toggleTape","images","input","handleChange","name","style","marginBottom","type","value","onChange","alt","src","copycat","quietcat","onClick","CopyCatContainer","useState","setCopying","setInput","e","target","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"iMAoCeA,EALA,CACbC,UAnBgB,CAChBC,WAdiB,6CAejBC,SAde,MAefC,MAPY,QAQZC,gBAfsB,UAgBtBC,UAfgB,QAgBhBC,SAfe,IAgBfC,QAfc,OAgBdC,cAfoB,SAgBpBC,WAfiB,SAgBjBC,eAfqB,UAyBrBC,UAPgB,CAChBC,UAjBgB,OAkBhBC,MAjBY,QCqBCC,EA5BC,SAACC,GAAW,IAClBC,EAA2DD,EAA3DC,QAASC,EAAkDF,EAAlDE,WAAYC,EAAsCH,EAAtCG,OAAQC,EAA8BJ,EAA9BI,MAAOC,EAAuBL,EAAvBK,aAAcC,EAASN,EAATM,KAC1D,OACE,sBAAKC,MAAOvB,EAAOC,UAAnB,UACE,qBAAIsB,MAAO,CAAEC,aAAc,IAA3B,sBAA2CF,GAAQ,SACnD,wGAGA,uBAAOG,KAAK,OAAOC,MAAON,EAAOO,SAAUN,IAC3C,qBACEO,IAAI,MACJC,IAAKZ,EAAUE,EAAOW,QAAUX,EAAOY,SACvCC,QAASd,EACTK,MAAOvB,EAAOY,YAEhB,4BAAIK,EAAUG,EAAQ,WChBtBD,EAAS,CACbW,QACE,uEACFC,SACE,yEA4BWE,EAzBU,WAAO,IAAD,EACCC,oBAAS,GADV,mBACtBjB,EADsB,KACbkB,EADa,OAEHD,mBAAS,IAFN,mBAEtBd,EAFsB,KAEfgB,EAFe,OAGLF,mBAAS,SAHJ,mBAGtBZ,EAHsB,UAa7B,OACE,cAAC,EAAD,CACEL,QAASA,EACTC,WAXe,WACjBiB,GAAYlB,IAWVE,OAAQA,EACRC,MAAOA,EACPC,aAViB,SAACgB,GACpBD,EAASC,EAAEC,OAAOZ,QAUhBJ,KAAMA,KClBGiB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.96bbf6a8.chunk.js","sourcesContent":["const fontFamily = 'Comic Sans MS, Lucida Handwriting, cursive';\nconst fontSize = '2vh';\nconst backgroundColor = '#282c34';\nconst minHeight = '100vh';\nconst minWidth = 400;\nconst display = 'flex';\nconst flexDirection = 'column';\nconst alignItems = 'center';\nconst justifyContent = 'center';\nconst color = 'white';\nconst marginTop = '20px';\nconst width = '20%';\n\nconst divStyles = {\n  fontFamily: fontFamily,\n  fontSize: fontSize,\n  color: color,\n  backgroundColor: backgroundColor,\n  minHeight: minHeight,\n  minWidth: minWidth,\n  display: display,\n  flexDirection: flexDirection,\n  alignItems: alignItems,\n  justifyContent: justifyContent,\n};\n\nconst imgStyles = {\n  marginTop: marginTop,\n  width: width,\n};\n\nconst styles = {\n  divStyles,\n  imgStyles,\n};\n\nexport default styles;\n","import React from 'react';\nimport styles from './styles';\nimport PropTypes from 'prop-types';\n\nconst CopyCat = (props) => {\n  const { copying, toggleTape, images, input, handleChange, name } = props;\n  return (\n    <div style={styles.divStyles}>\n      <h1 style={{ marginBottom: 80 }}>Copy Cat {name || 'Tom'}</h1>\n      <h2>\n        Type in the box below and click on the cat image to show/hide response\n      </h2>\n      <input type=\"text\" value={input} onChange={handleChange} />\n      <img\n        alt=\"cat\"\n        src={copying ? images.copycat : images.quietcat}\n        onClick={toggleTape}\n        style={styles.imgStyles}\n      />\n      <p>{copying ? input : null}</p>\n    </div>\n  );\n};\n\nCopyCat.propTypes = {\n  copying: PropTypes.bool.isRequired,\n  toggleTape: PropTypes.func.isRequired,\n  input: PropTypes.string.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nexport default CopyCat;\n","import React, { useState } from 'react';\nimport CopyCat from './CopyCat';\n\nconst images = {\n  copycat:\n    'https://content.codecademy.com/courses/React/react_photo_copycat.png',\n  quietcat:\n    'https://content.codecademy.com/courses/React/react_photo_quietcat.png',\n};\n\nconst CopyCatContainer = () => {\n  const [copying, setCopying] = useState(true);\n  const [input, setInput] = useState('');\n  const [name, setName] = useState('Sushi');\n\n  const toggleTape = () => {\n    setCopying(!copying);\n  };\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  return (\n    <CopyCat\n      copying={copying}\n      toggleTape={toggleTape}\n      images={images}\n      input={input}\n      handleChange={handleChange}\n      name={name}\n    />\n  );\n};\n\nexport default CopyCatContainer;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport CopyCatContainer from './CopyCatContainer';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <CopyCatContainer />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}